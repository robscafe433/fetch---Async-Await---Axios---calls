"async and await make promises easier to write"
// https://www.w3schools.com/js/js_async.asp

*NOTE: For Await see below*

The keyword async before a function makes the function return a promise:



Lines 10 through 13 Pertain to the "Promise Maker" (The waiter, restaurant setting)" 

------------------

*The different phases of a promise:
    1). "Pending" It means we are waiting.When you first create and return a promise object by defult it's in a pending state. 
    2). "Fullfilled or Resolved". Means successful.  When you call resolve or reject <- it is no longer pending it gets resolved or rejected. 
    3). "Rejected" which means it's done but couldn't accomplish what was expected. 

------------------

Lines "Promise Receiver" 

 *Where ever we call our async function from. 

  


async function myFunction() {
  return "Hello";
}

Is the same as:

function myFunction() {
  return Promise.resolve("Hello");
}



*******************************

Here is how to use the Promise:

myFunction().then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);
Example
async function myFunction() {
  return "Hello";
}
myFunction().then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);


-------------------------------------------------------

Await:

Await Syntax
The await keyword can only be used "INSIDE an async function".

The await keyword makes the function pause the execution and wait for a resolved promise before it continues:

let value = await promise;



